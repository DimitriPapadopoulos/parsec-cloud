[workspace]
members = [
    "server",
    "oxidation/libparsec",
    "oxidation/libparsec/crates/client",
    "oxidation/libparsec/crates/client_connection",
    "oxidation/libparsec/crates/client_high_level_api",
    "oxidation/libparsec/crates/crypto",
    "oxidation/libparsec/crates/platform_async",
    "oxidation/libparsec/crates/platform_device_loader",
    "oxidation/libparsec/crates/platform_storage",
    "oxidation/libparsec/crates/platform_storage2",
    "oxidation/libparsec/crates/protocol",
    "oxidation/libparsec/crates/serialization_format",
    "oxidation/libparsec/crates/testbed",
    "oxidation/libparsec/crates/tests_fixtures",
    "oxidation/libparsec/crates/tests_macros",
    "oxidation/libparsec/crates/types",
    "oxidation/bindings/web",
    "oxidation/bindings/electron",
    "oxidation/bindings/android/libparsec/rust",
]
# Ignore bindings stuff given they are special snowflakes that require exotic toolchain and dependencies
# The idea is to be able to do `cargo test` from the root and have all the libparsec&co tests run
default-members = [
    "oxidation/libparsec",
    "oxidation/libparsec/crates/client",
    "oxidation/libparsec/crates/client_connection",
    "oxidation/libparsec/crates/client_high_level_api",
    "oxidation/libparsec/crates/crypto",
    "oxidation/libparsec/crates/platform_async",
    "oxidation/libparsec/crates/platform_device_loader",
    "oxidation/libparsec/crates/platform_storage",
    "oxidation/libparsec/crates/platform_storage2",
    "oxidation/libparsec/crates/protocol",
    "oxidation/libparsec/crates/serialization_format",
    "oxidation/libparsec/crates/testbed",
    "oxidation/libparsec/crates/tests_fixtures",
    "oxidation/libparsec/crates/tests_macros",
    "oxidation/libparsec/crates/types",
]

# Rust unoptimized code is really slow with crypto algorithm and regex compilation,
# hence we optimize our 3rd party dependencies.
[profile.dev.package."*"]
opt-level = 1

[profile.dev-python]
inherits = "dev"
# We don't optimize our own crates here given it comes with a high impact on
# when doing single change recompilation.

# Custom profiles for the CI. The idea here is to try to save compilation time
# and artifacts size (to keep cache efficient).

[profile.ci-rust]
inherits = "dev"
# Remove debug symbols saves roughly ~30% compilation time and ~50% artifacts size
debug = false
# Given we don't keep our crate in the cache, we always build them from the
# ground. Removing that saves ~20% in artifacts size.
incremental = false

[profile.ci-python]
inherits = "ci-rust"
# Using `opt-level = 0` divides by 2 compilation time, however it makes code run much
# slower which is a no-go for Python tests :'(
opt-level = 1
