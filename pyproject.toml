[tool.poetry]
name = "parsec-cloud"
version = "v2.15.0+dev"
description = "Secure cloud framework"
authors = ["Scille SAS <contact@scille.fr>"]
readme = "README.rst"
homepage = "https://github.com/Scille/parsec-cloud"
documentation = "https://docs.parsec.cloud"
keywords = ["parsec", "cryptography", "sharing", "encryption"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.9",
]
packages = [
    { include = "parsec" },
]
exclude = [
]
include = [
    { path = "parsec/_parsec*.so", format = "wheel" }, # Rust lib for Linux & MacOS
    { path = "parsec/_parsec*.pyd", format = "wheel" }, # Rust lib for Windows
]

[tool.poetry.scripts]
parsec = "parsec.cli:cli"

[tool.poetry.dependencies]
python = "~3.9.10"

# Base requirements

certifi = ">=2021,<2023"
attrs = ">=21.4,<23.0"
click = "^8.0"
msgpack = "^1.0"
wsproto = "^1.2"
h11 = ">=0.13,<0.15"
# Can use marshmallow or the toasted flavour as you like ;-)
# marshmallow = "2.14.0"
toastedmarshmallow = "0.2.6" # updating causes consistency problem in test
trio = "^0.22"
trio_typing = "^0.7"
sentry-sdk = "^1.5"
structlog = ">=21.5,<23.0"
# colorama = "^0.4.4  # structlog colored output"
async_exit_stack = "^1.0"
outcome = "^1.1"

# Backend-only requirements

jinja2 = { version="^3.0", optional=true }
# Quart
quart-trio = { version="^0.10.0", optional=true }
quart = { version="^0.18.1", optional=true }
hypercorn = { version="^0.13.2", optional=true }
# PostgreSQL
triopg = { version="^0.6", optional=true }
trio-asyncio = { version="^0.12", optional=true }
# S3
boto3 = { version="^1.23", optional=true }
botocore = { version="^1.26", optional=true }
# Swift
python-swiftclient = { version=">=3.13,<5.0", optional=true }
pbr = { version="^5.9", optional=true }

[tool.poetry.extras]
backend = [
    "jinja2",
    "quart-trio",
    "quart",
    "hypercorn",
    "triopg",
    "trio-asyncio",
    "boto3",
    "botocore",
    "python-swiftclient",
    "pbr",
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-xdist = "^3.1"
pytest-trio = "^0.8"
pytest-rerunfailures = "^10.2"
hypothesis = "^6.54"
hypothesis-trio = "^0.6"
trustme = "^0.9"
winfspy = { version="^0.8", extras=["test"], markers="platform_system=='Windows'" }
psutil = "^5.9"
poetry-lock-package = "^0.4.4"
docutils = "0.18.1"
Babel = "^2.10"

ruff = "0.0.261"
black = "23.3.0"
mypy = "^0.982"

setuptools = ">=63.1,<68.0"

maturin = "0.15.1"
patchelf = { version = "^0.17.2.0", markers = "platform_system=='Linux'" }

cibuildwheel = "v2.12.3"
editorconfig-checker = "2.4.0"
types-requests = "^2.28"
boto3-stubs = "^1.26"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^6.1.3"
sphinx-intl = "^2.1.0"
sphinx-rtd-theme = "^1.2.0"
docutils = "0.18.1"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.cibuildwheel]
build = "cp39-{manylinux,macos,win}*"
archs = ["auto64"]
build-verbosity = 3
before-all = "bash {project}/misc/setup-rust.sh"
before-build = "python -m pip install -U pip"
test-command = "parsec --version"

[tool.cibuildwheel.environment]
# As it name suggests, `misc/setup-rust.sh` (run during cibuildwheel's before-all) will
# install Rust if it is not already available. In this case, Rust bin dir was previously
# non-existent and hence $PATH don't know about it (and maturin will fail when calling cargo).
# For this reason we force $PATH to contain Rust bin dir.
PATH = "$PATH:$HOME/.cargo/bin"

[tool.ruff]
line-length = 100
target-version = "py39"

select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # Unused noqa directive
    "RUF100",
    # isort
    "I",
]

# Handled by black:
# E501: Line too long
#
# Currently not passing errors:
# E402 Module level import not at top of file
# F541 f-string without any placeholders
ignore = ["E501", "E402", "F541"]

extend-exclude = [
    "docs",
    "oxidation/",
    "misc/bench.py",
]

[tool.ruff.isort]
known-first-party = ["parsec"]

[tool.maturin]
module-name = "parsec._parsec"

[build-system]
# Be careful `build-system` entry works out of poetry,
# hence those dependencies are not resolved & pinned into `poetry.lock`
requires = [
    "poetry-core>=1.0.0",
    "setuptools",
    "maturin==0.15.1",
    "maturin[patchelf]==0.15.1; platform_system=='Linux'",
    "patchelf~=0.17.2.0; platform_system=='Linux'",
    "docutils~=0.18.1",
]
build-backend = "poetry.core.masonry.api"
