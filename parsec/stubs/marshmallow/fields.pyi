# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS
from __future__ import annotations
from typing import Any, Generic, TypeVar, Callable

missing_: object

T = TypeVar("T")

class Field(Generic[T]):
    default: object

    def __init__(
        self,
        default: object = missing_,
        attribute: Optional[str] = None,
        load_from: Optional[str] = None,
        dump_to: Optional[str] = None,
        error: Optional[Any] = None,
        validate: Optional[Callable[[Any], bool]] = None,
        required: bool = False,
        allow_none: Optional[bool] = None,
        load_only: bool = False,
        dump_only: bool = False,
        missing: object = missing_,
        error_messages: Optional[dict[str, object]] = None,
        **metadata: Any,
    ): ...
    def serialize(
        self, attr: str, obj: object, accessor: Callable[..., object] | None = None
    ) -> Any: ...
    def deserialize(self, value: object, attr: str | None = None, data: Any = None) -> T: ...
    def _serialize(self, value: T | None, attr: str, obj: object) -> Any: ...
    def _deserialize(self, value: object, attr: str, obj: dict[str, object]) -> T: ...
    def __deepcopy__(self, memo: Any): ...
    def fail(self, key: str, **kwargs: Any) -> None: ...

class Int(Field): ...
class Float(Field): ...
class String(Field): ...
class List(Field): ...
class Dict(Field): ...
class Nested(Field): ...
class Integer(Field): ...
class Boolean(Field): ...
class Email(Field): ...
