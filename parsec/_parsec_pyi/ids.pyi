from uuid import UUID
from typing import Optional
from pendulum import DateTime

from parsec.api.protocol import RealmRole, UserProfile

class OrganizationID:
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: OrganizationID) -> bool: ...
    def __ne__(self, other: OrganizationID) -> bool: ...
    def __lt__(self, other: OrganizationID) -> bool: ...
    def __gt__(self, other: OrganizationID) -> bool: ...
    def __le__(self, other: OrganizationID) -> bool: ...
    def __ge__(self, other: OrganizationID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def str(self) -> str: ...

class UserID:
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: UserID) -> bool: ...
    def __ne__(self, other: UserID) -> bool: ...
    def __lt__(self, other: UserID) -> bool: ...
    def __gt__(self, other: UserID) -> bool: ...
    def __le__(self, other: UserID) -> bool: ...
    def __ge__(self, other: UserID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def str(self) -> str: ...

class DeviceName:
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: DeviceName) -> bool: ...
    def __ne__(self, other: DeviceName) -> bool: ...
    def __lt__(self, other: DeviceName) -> bool: ...
    def __gt__(self, other: DeviceName) -> bool: ...
    def __le__(self, other: DeviceName) -> bool: ...
    def __ge__(self, other: DeviceName) -> bool: ...
    def __hash__(self) -> int: ...

class DeviceID:
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: DeviceID | None) -> bool: ...
    def __ne__(self, other: DeviceID | None) -> bool: ...
    def __lt__(self, other: DeviceID | None) -> bool: ...
    def __gt__(self, other: DeviceID | None) -> bool: ...
    def __le__(self, other: DeviceID | None) -> bool: ...
    def __ge__(self, other: DeviceID | None) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def str(self) -> str: ...
    @property
    def user_id(self) -> UserID: ...
    @property
    def device_name(self) -> DeviceName: ...

class DeviceLabel:
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: DeviceLabel) -> bool: ...
    def __ne__(self, other: DeviceLabel) -> bool: ...
    def __lt__(self, other: DeviceLabel) -> bool: ...
    def __gt__(self, other: DeviceLabel) -> bool: ...
    def __le__(self, other: DeviceLabel) -> bool: ...
    def __ge__(self, other: DeviceLabel) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def str(self) -> str: ...

class HumanHandle:
    def __init__(self, email: str, label: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: HumanHandle | None) -> bool: ...
    def __ne__(self, other: HumanHandle | None) -> bool: ...
    def __lt__(self, other: HumanHandle | None) -> bool: ...
    def __gt__(self, other: HumanHandle | None) -> bool: ...
    def __le__(self, other: HumanHandle | None) -> bool: ...
    def __ge__(self, other: HumanHandle | None) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def email(self) -> str: ...
    @property
    def label(self) -> str: ...

class RealmID:
    def __init__(self, uuid: UUID) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: RealmID) -> bool: ...
    def __ne__(self, other: RealmID) -> bool: ...
    def __lt__(self, other: RealmID) -> bool: ...
    def __gt__(self, other: RealmID) -> bool: ...
    def __le__(self, other: RealmID) -> bool: ...
    def __ge__(self, other: RealmID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def uuid(self) -> UUID: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def hex(self) -> str: ...
    def from_bytes(bytes: bytes) -> RealmID: ...
    def from_hex(hex: str) -> RealmID: ...
    def new() -> RealmID: ...

class BlockID:
    def __init__(self, uuid: UUID) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: BlockID) -> bool: ...
    def __ne__(self, other: BlockID) -> bool: ...
    def __lt__(self, other: BlockID) -> bool: ...
    def __gt__(self, other: BlockID) -> bool: ...
    def __le__(self, other: BlockID) -> bool: ...
    def __ge__(self, other: BlockID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def uuid(self) -> UUID: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def hex(self) -> str: ...
    def from_bytes(bytes: bytes) -> BlockID: ...
    def from_hex(hex: str) -> BlockID: ...
    def new() -> BlockID: ...

class VlobID:
    def __init__(self, uuid: UUID) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: VlobID) -> bool: ...
    def __ne__(self, other: VlobID) -> bool: ...
    def __lt__(self, other: VlobID) -> bool: ...
    def __gt__(self, other: VlobID) -> bool: ...
    def __le__(self, other: VlobID) -> bool: ...
    def __ge__(self, other: VlobID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def uuid(self) -> UUID: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def hex(self) -> str: ...
    def from_bytes(bytes: bytes) -> VlobID: ...
    def from_hex(hex: str) -> VlobID: ...
    def new() -> VlobID: ...

class EntryID:
    def __init__(self, uuid: UUID) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: EntryID) -> bool: ...
    def __ne__(self, other: EntryID) -> bool: ...
    def __lt__(self, other: EntryID) -> bool: ...
    def __gt__(self, other: EntryID) -> bool: ...
    def __le__(self, other: EntryID) -> bool: ...
    def __ge__(self, other: EntryID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def uuid(self) -> UUID: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def hex(self) -> str: ...
    def from_bytes(bytes: bytes) -> EntryID: ...
    def from_hex(hex: str) -> EntryID: ...
    def new() -> EntryID: ...

class ChunkID:
    def __init__(self, uuid: UUID) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: ChunkID | EntryID) -> bool: ...
    def __ne__(self, other: ChunkID | EntryID) -> bool: ...
    def __lt__(self, other: ChunkID | EntryID) -> bool: ...
    def __gt__(self, other: ChunkID | EntryID) -> bool: ...
    def __le__(self, other: ChunkID | EntryID) -> bool: ...
    def __ge__(self, other: ChunkID | EntryID) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def uuid(self) -> UUID: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def hex(self) -> str: ...
    def from_bytes(bytes: bytes) -> ChunkID: ...
    def from_hex(hex: str) -> ChunkID: ...
    def new() -> ChunkID: ...

class UserCertificate:
    def __init__(
        self,
        author: Optional[DeviceID],
        timestamp: DateTime,
        user_id: UserID,
        human_handle: Optional[HumanHandle],
        public_key: PublicKey,
        profile: UserProfile,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: UserCertificate) -> bool: ...
    def __ne__(self, other: UserCertificate) -> bool: ...
    @property
    def is_admin(self) -> bool: ...
    @property
    def author(self) -> Optional[DeviceID]: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def user_id(self) -> UserID: ...
    @property
    def human_handle(self) -> Optional[HumanHandle]: ...
    @property
    def public_key(self) -> PublicKey: ...
    @property
    def profile(self) -> UserProfile: ...
    def evolve(self, **kwargs): ...
    def verify_and_load(
        signed: bytes,
        author_verify_key: VerifyKey,
        expected_author: Optional[DeviceID] = None,
        expected_user: Optional[UserID] = None,
        expected_human_handle: Optional[HumanHandle] = None,
    ) -> UserCertificate: ...
    def dump_and_sign(self, author_signkey: SigningKey) -> bytes: ...
    def unsecure_load(signed: bytes) -> UserCertificate: ...

class DeviceCertificate:
    def __init__(
        self,
        author: Optional[DeviceID],
        timestamp: DateTime,
        device_id: DeviceID,
        device_label: Optional[DeviceLabel],
        verify_key: VerifyKey,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: DeviceCertificate) -> bool: ...
    def __ne__(self, other: DeviceCertificate) -> bool: ...
    @property
    def author(self) -> Optional[DeviceID]: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def device_id(self) -> DeviceID: ...
    @property
    def device_label(self) -> Optional[DeviceLabel]: ...
    @property
    def verify_key(self) -> VerifyKey: ...
    def evolve(self, **kwargs): ...
    def verify_and_load(
        signed: bytes,
        author_verify_key: VerifyKey,
        expected_author: Optional[DeviceID] = None,
        expected_device: Optional[DeviceID] = None,
    ) -> DeviceCertificate: ...
    def dump_and_sign(self, author_signkey: SigningKey) -> bytes: ...
    def unsecure_load(signed: bytes) -> DeviceCertificate: ...

class RevokedUserCertificate:
    def __init__(self, author: DeviceID, timestamp: DateTime, user_id: UserID) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RevokedUserCertificate) -> bool: ...
    def __ne__(self, other: RevokedUserCertificate) -> bool: ...
    @property
    def author(self) -> Optional[DeviceID]: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def device_id(self) -> DeviceID: ...
    @property
    def device_label(self) -> Optional[DeviceLabel]: ...
    @property
    def verify_key(self) -> VerifyKey: ...
    def evolve(self, **kwargs): ...
    def verify_and_load(
        signed: bytes,
        author_verify_key: VerifyKey,
        expected_author: Optional[DeviceID] = None,
        expected_device: Optional[DeviceID] = None,
    ) -> RevokedUserCertificate: ...
    def dump_and_sign(self, author_signkey: SigningKey) -> bytes: ...
    def unsecure_load(signed: bytes) -> RevokedUserCertificate: ...

class RealmRoleCertificate:
    def __init__(
        self,
        author: Optional[DeviceID],
        timestamp: DateTime,
        realm_id: RealmID,
        user_id: UserID,
        role: Optional[RealmRole],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmRoleCertificate) -> bool: ...
    def __ne__(self, other: RealmRoleCertificate) -> bool: ...
    @property
    def author(self) -> Optional[DeviceID]: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def user_id(self) -> UserID: ...
    @property
    def role(self) -> Optional[RealmRole]: ...
    def evolve(self, **kwargs): ...
    def verify_and_load(
        signed: bytes,
        author_verify_key: VerifyKey,
        expected_author: Optional[DeviceID] = None,
        expected_realm: Optional[RealmID] = None,
        expected_user: Optional[UserID] = None,
        expected_role: Optional[RealmRole] = None,
    ) -> RealmRoleCertificate: ...
    def dump_and_sign(self, author_signkey: SigningKey) -> bytes: ...
    def unsecure_load(signed: bytes) -> RealmRoleCertificate: ...
    def build_realm_root_certif(
        author: DeviceID, timestamp: DateTime, realm_id: RealmID
    ) -> RealmRoleCertificate: ...
